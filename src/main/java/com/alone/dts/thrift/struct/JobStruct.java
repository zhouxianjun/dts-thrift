/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.alone.dts.thrift.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-04")
public class JobStruct implements org.apache.thrift.TBase<JobStruct, JobStruct._Fields>, java.io.Serializable, Cloneable, Comparable<JobStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobStruct");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_RETRY_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxRetryTimes", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RETRY_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("retryTimes", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NODE_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeGroup", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FEEDBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("feedback", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField CRON_FIELD_DESC = new org.apache.thrift.protocol.TField("cron", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TRIGGER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField REPEAT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("repeatCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REPEAT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("repeatInterval", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField RELY_ON_PREV_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("relyOnPrevCycle", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField SUBMIT_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("submitHost", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SUBMIT_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("submitPid", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JobStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JobStructTupleSchemeFactory();

  private String taskId; // required
  private String type; // required
  private int maxRetryTimes; // optional
  private int retryTimes; // optional
  private String nodeGroup; // required
  private String action; // required
  private String params; // optional
  private boolean feedback; // optional
  private String cron; // optional
  private long triggerTime; // optional
  private int repeatCount; // optional
  private int repeatInterval; // optional
  private boolean relyOnPrevCycle; // optional
  private String submitHost; // required
  private int submitPid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    TYPE((short)2, "type"),
    MAX_RETRY_TIMES((short)3, "maxRetryTimes"),
    RETRY_TIMES((short)5, "retryTimes"),
    NODE_GROUP((short)6, "nodeGroup"),
    ACTION((short)7, "action"),
    PARAMS((short)8, "params"),
    FEEDBACK((short)9, "feedback"),
    CRON((short)10, "cron"),
    TRIGGER_TIME((short)11, "triggerTime"),
    REPEAT_COUNT((short)12, "repeatCount"),
    REPEAT_INTERVAL((short)13, "repeatInterval"),
    RELY_ON_PREV_CYCLE((short)14, "relyOnPrevCycle"),
    SUBMIT_HOST((short)15, "submitHost"),
    SUBMIT_PID((short)16, "submitPid");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // TYPE
          return TYPE;
        case 3: // MAX_RETRY_TIMES
          return MAX_RETRY_TIMES;
        case 5: // RETRY_TIMES
          return RETRY_TIMES;
        case 6: // NODE_GROUP
          return NODE_GROUP;
        case 7: // ACTION
          return ACTION;
        case 8: // PARAMS
          return PARAMS;
        case 9: // FEEDBACK
          return FEEDBACK;
        case 10: // CRON
          return CRON;
        case 11: // TRIGGER_TIME
          return TRIGGER_TIME;
        case 12: // REPEAT_COUNT
          return REPEAT_COUNT;
        case 13: // REPEAT_INTERVAL
          return REPEAT_INTERVAL;
        case 14: // RELY_ON_PREV_CYCLE
          return RELY_ON_PREV_CYCLE;
        case 15: // SUBMIT_HOST
          return SUBMIT_HOST;
        case 16: // SUBMIT_PID
          return SUBMIT_PID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXRETRYTIMES_ISSET_ID = 0;
  private static final int __RETRYTIMES_ISSET_ID = 1;
  private static final int __FEEDBACK_ISSET_ID = 2;
  private static final int __TRIGGERTIME_ISSET_ID = 3;
  private static final int __REPEATCOUNT_ISSET_ID = 4;
  private static final int __REPEATINTERVAL_ISSET_ID = 5;
  private static final int __RELYONPREVCYCLE_ISSET_ID = 6;
  private static final int __SUBMITPID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MAX_RETRY_TIMES,_Fields.RETRY_TIMES,_Fields.PARAMS,_Fields.FEEDBACK,_Fields.CRON,_Fields.TRIGGER_TIME,_Fields.REPEAT_COUNT,_Fields.REPEAT_INTERVAL,_Fields.RELY_ON_PREV_CYCLE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_RETRY_TIMES, new org.apache.thrift.meta_data.FieldMetaData("maxRetryTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETRY_TIMES, new org.apache.thrift.meta_data.FieldMetaData("retryTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODE_GROUP, new org.apache.thrift.meta_data.FieldMetaData("nodeGroup", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEEDBACK, new org.apache.thrift.meta_data.FieldMetaData("feedback", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CRON, new org.apache.thrift.meta_data.FieldMetaData("cron", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRIGGER_TIME, new org.apache.thrift.meta_data.FieldMetaData("triggerTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPEAT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("repeatCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPEAT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("repeatInterval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELY_ON_PREV_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("relyOnPrevCycle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SUBMIT_HOST, new org.apache.thrift.meta_data.FieldMetaData("submitHost", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBMIT_PID, new org.apache.thrift.meta_data.FieldMetaData("submitPid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobStruct.class, metaDataMap);
  }

  public JobStruct() {
    this.maxRetryTimes = 10;

    this.retryTimes = 0;

    this.feedback = false;

    this.repeatCount = 0;

    this.repeatInterval = 1000;

    this.relyOnPrevCycle = false;

  }

  public JobStruct(
    String taskId,
    String type,
    String nodeGroup,
    String action,
    String submitHost,
    int submitPid)
  {
    this();
    this.taskId = taskId;
    this.type = type;
    this.nodeGroup = nodeGroup;
    this.action = action;
    this.submitHost = submitHost;
    this.submitPid = submitPid;
    setSubmitPidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobStruct(JobStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTaskId()) {
      this.taskId = other.taskId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.maxRetryTimes = other.maxRetryTimes;
    this.retryTimes = other.retryTimes;
    if (other.isSetNodeGroup()) {
      this.nodeGroup = other.nodeGroup;
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetParams()) {
      this.params = other.params;
    }
    this.feedback = other.feedback;
    if (other.isSetCron()) {
      this.cron = other.cron;
    }
    this.triggerTime = other.triggerTime;
    this.repeatCount = other.repeatCount;
    this.repeatInterval = other.repeatInterval;
    this.relyOnPrevCycle = other.relyOnPrevCycle;
    if (other.isSetSubmitHost()) {
      this.submitHost = other.submitHost;
    }
    this.submitPid = other.submitPid;
  }

  public JobStruct deepCopy() {
    return new JobStruct(this);
  }

  @Override
  public void clear() {
    this.taskId = null;
    this.type = null;
    this.maxRetryTimes = 10;

    this.retryTimes = 0;

    this.nodeGroup = null;
    this.action = null;
    this.params = null;
    this.feedback = false;

    this.cron = null;
    setTriggerTimeIsSet(false);
    this.triggerTime = 0;
    this.repeatCount = 0;

    this.repeatInterval = 1000;

    this.relyOnPrevCycle = false;

    this.submitHost = null;
    setSubmitPidIsSet(false);
    this.submitPid = 0;
  }

  public String getTaskId() {
    return this.taskId;
  }

  public JobStruct setTaskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  public void unsetTaskId() {
    this.taskId = null;
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return this.taskId != null;
  }

  public void setTaskIdIsSet(boolean value) {
    if (!value) {
      this.taskId = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public JobStruct setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getMaxRetryTimes() {
    return this.maxRetryTimes;
  }

  public JobStruct setMaxRetryTimes(int maxRetryTimes) {
    this.maxRetryTimes = maxRetryTimes;
    setMaxRetryTimesIsSet(true);
    return this;
  }

  public void unsetMaxRetryTimes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXRETRYTIMES_ISSET_ID);
  }

  /** Returns true if field maxRetryTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRetryTimes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXRETRYTIMES_ISSET_ID);
  }

  public void setMaxRetryTimesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXRETRYTIMES_ISSET_ID, value);
  }

  public int getRetryTimes() {
    return this.retryTimes;
  }

  public JobStruct setRetryTimes(int retryTimes) {
    this.retryTimes = retryTimes;
    setRetryTimesIsSet(true);
    return this;
  }

  public void unsetRetryTimes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETRYTIMES_ISSET_ID);
  }

  /** Returns true if field retryTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetRetryTimes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETRYTIMES_ISSET_ID);
  }

  public void setRetryTimesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETRYTIMES_ISSET_ID, value);
  }

  public String getNodeGroup() {
    return this.nodeGroup;
  }

  public JobStruct setNodeGroup(String nodeGroup) {
    this.nodeGroup = nodeGroup;
    return this;
  }

  public void unsetNodeGroup() {
    this.nodeGroup = null;
  }

  /** Returns true if field nodeGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeGroup() {
    return this.nodeGroup != null;
  }

  public void setNodeGroupIsSet(boolean value) {
    if (!value) {
      this.nodeGroup = null;
    }
  }

  public String getAction() {
    return this.action;
  }

  public JobStruct setAction(String action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public String getParams() {
    return this.params;
  }

  public JobStruct setParams(String params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public boolean isFeedback() {
    return this.feedback;
  }

  public JobStruct setFeedback(boolean feedback) {
    this.feedback = feedback;
    setFeedbackIsSet(true);
    return this;
  }

  public void unsetFeedback() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEEDBACK_ISSET_ID);
  }

  /** Returns true if field feedback is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedback() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEEDBACK_ISSET_ID);
  }

  public void setFeedbackIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEEDBACK_ISSET_ID, value);
  }

  public String getCron() {
    return this.cron;
  }

  public JobStruct setCron(String cron) {
    this.cron = cron;
    return this;
  }

  public void unsetCron() {
    this.cron = null;
  }

  /** Returns true if field cron is set (has been assigned a value) and false otherwise */
  public boolean isSetCron() {
    return this.cron != null;
  }

  public void setCronIsSet(boolean value) {
    if (!value) {
      this.cron = null;
    }
  }

  public long getTriggerTime() {
    return this.triggerTime;
  }

  public JobStruct setTriggerTime(long triggerTime) {
    this.triggerTime = triggerTime;
    setTriggerTimeIsSet(true);
    return this;
  }

  public void unsetTriggerTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID);
  }

  /** Returns true if field triggerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID);
  }

  public void setTriggerTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID, value);
  }

  public int getRepeatCount() {
    return this.repeatCount;
  }

  public JobStruct setRepeatCount(int repeatCount) {
    this.repeatCount = repeatCount;
    setRepeatCountIsSet(true);
    return this;
  }

  public void unsetRepeatCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPEATCOUNT_ISSET_ID);
  }

  /** Returns true if field repeatCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPEATCOUNT_ISSET_ID);
  }

  public void setRepeatCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPEATCOUNT_ISSET_ID, value);
  }

  public int getRepeatInterval() {
    return this.repeatInterval;
  }

  public JobStruct setRepeatInterval(int repeatInterval) {
    this.repeatInterval = repeatInterval;
    setRepeatIntervalIsSet(true);
    return this;
  }

  public void unsetRepeatInterval() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPEATINTERVAL_ISSET_ID);
  }

  /** Returns true if field repeatInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatInterval() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPEATINTERVAL_ISSET_ID);
  }

  public void setRepeatIntervalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPEATINTERVAL_ISSET_ID, value);
  }

  public boolean isRelyOnPrevCycle() {
    return this.relyOnPrevCycle;
  }

  public JobStruct setRelyOnPrevCycle(boolean relyOnPrevCycle) {
    this.relyOnPrevCycle = relyOnPrevCycle;
    setRelyOnPrevCycleIsSet(true);
    return this;
  }

  public void unsetRelyOnPrevCycle() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELYONPREVCYCLE_ISSET_ID);
  }

  /** Returns true if field relyOnPrevCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetRelyOnPrevCycle() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELYONPREVCYCLE_ISSET_ID);
  }

  public void setRelyOnPrevCycleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELYONPREVCYCLE_ISSET_ID, value);
  }

  public String getSubmitHost() {
    return this.submitHost;
  }

  public JobStruct setSubmitHost(String submitHost) {
    this.submitHost = submitHost;
    return this;
  }

  public void unsetSubmitHost() {
    this.submitHost = null;
  }

  /** Returns true if field submitHost is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitHost() {
    return this.submitHost != null;
  }

  public void setSubmitHostIsSet(boolean value) {
    if (!value) {
      this.submitHost = null;
    }
  }

  public int getSubmitPid() {
    return this.submitPid;
  }

  public JobStruct setSubmitPid(int submitPid) {
    this.submitPid = submitPid;
    setSubmitPidIsSet(true);
    return this;
  }

  public void unsetSubmitPid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBMITPID_ISSET_ID);
  }

  /** Returns true if field submitPid is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitPid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBMITPID_ISSET_ID);
  }

  public void setSubmitPidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBMITPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case MAX_RETRY_TIMES:
      if (value == null) {
        unsetMaxRetryTimes();
      } else {
        setMaxRetryTimes((Integer)value);
      }
      break;

    case RETRY_TIMES:
      if (value == null) {
        unsetRetryTimes();
      } else {
        setRetryTimes((Integer)value);
      }
      break;

    case NODE_GROUP:
      if (value == null) {
        unsetNodeGroup();
      } else {
        setNodeGroup((String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((String)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((String)value);
      }
      break;

    case FEEDBACK:
      if (value == null) {
        unsetFeedback();
      } else {
        setFeedback((Boolean)value);
      }
      break;

    case CRON:
      if (value == null) {
        unsetCron();
      } else {
        setCron((String)value);
      }
      break;

    case TRIGGER_TIME:
      if (value == null) {
        unsetTriggerTime();
      } else {
        setTriggerTime((Long)value);
      }
      break;

    case REPEAT_COUNT:
      if (value == null) {
        unsetRepeatCount();
      } else {
        setRepeatCount((Integer)value);
      }
      break;

    case REPEAT_INTERVAL:
      if (value == null) {
        unsetRepeatInterval();
      } else {
        setRepeatInterval((Integer)value);
      }
      break;

    case RELY_ON_PREV_CYCLE:
      if (value == null) {
        unsetRelyOnPrevCycle();
      } else {
        setRelyOnPrevCycle((Boolean)value);
      }
      break;

    case SUBMIT_HOST:
      if (value == null) {
        unsetSubmitHost();
      } else {
        setSubmitHost((String)value);
      }
      break;

    case SUBMIT_PID:
      if (value == null) {
        unsetSubmitPid();
      } else {
        setSubmitPid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTaskId();

    case TYPE:
      return getType();

    case MAX_RETRY_TIMES:
      return getMaxRetryTimes();

    case RETRY_TIMES:
      return getRetryTimes();

    case NODE_GROUP:
      return getNodeGroup();

    case ACTION:
      return getAction();

    case PARAMS:
      return getParams();

    case FEEDBACK:
      return isFeedback();

    case CRON:
      return getCron();

    case TRIGGER_TIME:
      return getTriggerTime();

    case REPEAT_COUNT:
      return getRepeatCount();

    case REPEAT_INTERVAL:
      return getRepeatInterval();

    case RELY_ON_PREV_CYCLE:
      return isRelyOnPrevCycle();

    case SUBMIT_HOST:
      return getSubmitHost();

    case SUBMIT_PID:
      return getSubmitPid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case TYPE:
      return isSetType();
    case MAX_RETRY_TIMES:
      return isSetMaxRetryTimes();
    case RETRY_TIMES:
      return isSetRetryTimes();
    case NODE_GROUP:
      return isSetNodeGroup();
    case ACTION:
      return isSetAction();
    case PARAMS:
      return isSetParams();
    case FEEDBACK:
      return isSetFeedback();
    case CRON:
      return isSetCron();
    case TRIGGER_TIME:
      return isSetTriggerTime();
    case REPEAT_COUNT:
      return isSetRepeatCount();
    case REPEAT_INTERVAL:
      return isSetRepeatInterval();
    case RELY_ON_PREV_CYCLE:
      return isSetRelyOnPrevCycle();
    case SUBMIT_HOST:
      return isSetSubmitHost();
    case SUBMIT_PID:
      return isSetSubmitPid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobStruct)
      return this.equals((JobStruct)that);
    return false;
  }

  public boolean equals(JobStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_taskId = true && this.isSetTaskId();
    boolean that_present_taskId = true && that.isSetTaskId();
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (!this.taskId.equals(that.taskId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_maxRetryTimes = true && this.isSetMaxRetryTimes();
    boolean that_present_maxRetryTimes = true && that.isSetMaxRetryTimes();
    if (this_present_maxRetryTimes || that_present_maxRetryTimes) {
      if (!(this_present_maxRetryTimes && that_present_maxRetryTimes))
        return false;
      if (this.maxRetryTimes != that.maxRetryTimes)
        return false;
    }

    boolean this_present_retryTimes = true && this.isSetRetryTimes();
    boolean that_present_retryTimes = true && that.isSetRetryTimes();
    if (this_present_retryTimes || that_present_retryTimes) {
      if (!(this_present_retryTimes && that_present_retryTimes))
        return false;
      if (this.retryTimes != that.retryTimes)
        return false;
    }

    boolean this_present_nodeGroup = true && this.isSetNodeGroup();
    boolean that_present_nodeGroup = true && that.isSetNodeGroup();
    if (this_present_nodeGroup || that_present_nodeGroup) {
      if (!(this_present_nodeGroup && that_present_nodeGroup))
        return false;
      if (!this.nodeGroup.equals(that.nodeGroup))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_feedback = true && this.isSetFeedback();
    boolean that_present_feedback = true && that.isSetFeedback();
    if (this_present_feedback || that_present_feedback) {
      if (!(this_present_feedback && that_present_feedback))
        return false;
      if (this.feedback != that.feedback)
        return false;
    }

    boolean this_present_cron = true && this.isSetCron();
    boolean that_present_cron = true && that.isSetCron();
    if (this_present_cron || that_present_cron) {
      if (!(this_present_cron && that_present_cron))
        return false;
      if (!this.cron.equals(that.cron))
        return false;
    }

    boolean this_present_triggerTime = true && this.isSetTriggerTime();
    boolean that_present_triggerTime = true && that.isSetTriggerTime();
    if (this_present_triggerTime || that_present_triggerTime) {
      if (!(this_present_triggerTime && that_present_triggerTime))
        return false;
      if (this.triggerTime != that.triggerTime)
        return false;
    }

    boolean this_present_repeatCount = true && this.isSetRepeatCount();
    boolean that_present_repeatCount = true && that.isSetRepeatCount();
    if (this_present_repeatCount || that_present_repeatCount) {
      if (!(this_present_repeatCount && that_present_repeatCount))
        return false;
      if (this.repeatCount != that.repeatCount)
        return false;
    }

    boolean this_present_repeatInterval = true && this.isSetRepeatInterval();
    boolean that_present_repeatInterval = true && that.isSetRepeatInterval();
    if (this_present_repeatInterval || that_present_repeatInterval) {
      if (!(this_present_repeatInterval && that_present_repeatInterval))
        return false;
      if (this.repeatInterval != that.repeatInterval)
        return false;
    }

    boolean this_present_relyOnPrevCycle = true && this.isSetRelyOnPrevCycle();
    boolean that_present_relyOnPrevCycle = true && that.isSetRelyOnPrevCycle();
    if (this_present_relyOnPrevCycle || that_present_relyOnPrevCycle) {
      if (!(this_present_relyOnPrevCycle && that_present_relyOnPrevCycle))
        return false;
      if (this.relyOnPrevCycle != that.relyOnPrevCycle)
        return false;
    }

    boolean this_present_submitHost = true && this.isSetSubmitHost();
    boolean that_present_submitHost = true && that.isSetSubmitHost();
    if (this_present_submitHost || that_present_submitHost) {
      if (!(this_present_submitHost && that_present_submitHost))
        return false;
      if (!this.submitHost.equals(that.submitHost))
        return false;
    }

    boolean this_present_submitPid = true;
    boolean that_present_submitPid = true;
    if (this_present_submitPid || that_present_submitPid) {
      if (!(this_present_submitPid && that_present_submitPid))
        return false;
      if (this.submitPid != that.submitPid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTaskId()) ? 131071 : 524287);
    if (isSetTaskId())
      hashCode = hashCode * 8191 + taskId.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaxRetryTimes()) ? 131071 : 524287);
    if (isSetMaxRetryTimes())
      hashCode = hashCode * 8191 + maxRetryTimes;

    hashCode = hashCode * 8191 + ((isSetRetryTimes()) ? 131071 : 524287);
    if (isSetRetryTimes())
      hashCode = hashCode * 8191 + retryTimes;

    hashCode = hashCode * 8191 + ((isSetNodeGroup()) ? 131071 : 524287);
    if (isSetNodeGroup())
      hashCode = hashCode * 8191 + nodeGroup.hashCode();

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + action.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    hashCode = hashCode * 8191 + ((isSetFeedback()) ? 131071 : 524287);
    if (isSetFeedback())
      hashCode = hashCode * 8191 + ((feedback) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCron()) ? 131071 : 524287);
    if (isSetCron())
      hashCode = hashCode * 8191 + cron.hashCode();

    hashCode = hashCode * 8191 + ((isSetTriggerTime()) ? 131071 : 524287);
    if (isSetTriggerTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(triggerTime);

    hashCode = hashCode * 8191 + ((isSetRepeatCount()) ? 131071 : 524287);
    if (isSetRepeatCount())
      hashCode = hashCode * 8191 + repeatCount;

    hashCode = hashCode * 8191 + ((isSetRepeatInterval()) ? 131071 : 524287);
    if (isSetRepeatInterval())
      hashCode = hashCode * 8191 + repeatInterval;

    hashCode = hashCode * 8191 + ((isSetRelyOnPrevCycle()) ? 131071 : 524287);
    if (isSetRelyOnPrevCycle())
      hashCode = hashCode * 8191 + ((relyOnPrevCycle) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSubmitHost()) ? 131071 : 524287);
    if (isSetSubmitHost())
      hashCode = hashCode * 8191 + submitHost.hashCode();

    hashCode = hashCode * 8191 + submitPid;

    return hashCode;
  }

  @Override
  public int compareTo(JobStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxRetryTimes()).compareTo(other.isSetMaxRetryTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRetryTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxRetryTimes, other.maxRetryTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetryTimes()).compareTo(other.isSetRetryTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetryTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retryTimes, other.retryTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeGroup()).compareTo(other.isSetNodeGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeGroup, other.nodeGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeedback()).compareTo(other.isSetFeedback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedback, other.feedback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCron()).compareTo(other.isSetCron());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCron()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cron, other.cron);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerTime()).compareTo(other.isSetTriggerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerTime, other.triggerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeatCount()).compareTo(other.isSetRepeatCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeatCount, other.repeatCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeatInterval()).compareTo(other.isSetRepeatInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeatInterval, other.repeatInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelyOnPrevCycle()).compareTo(other.isSetRelyOnPrevCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelyOnPrevCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relyOnPrevCycle, other.relyOnPrevCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitHost()).compareTo(other.isSetSubmitHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitHost, other.submitHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitPid()).compareTo(other.isSetSubmitPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitPid, other.submitPid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobStruct(");
    boolean first = true;

    sb.append("taskId:");
    if (this.taskId == null) {
      sb.append("null");
    } else {
      sb.append(this.taskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetMaxRetryTimes()) {
      if (!first) sb.append(", ");
      sb.append("maxRetryTimes:");
      sb.append(this.maxRetryTimes);
      first = false;
    }
    if (isSetRetryTimes()) {
      if (!first) sb.append(", ");
      sb.append("retryTimes:");
      sb.append(this.retryTimes);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("nodeGroup:");
    if (this.nodeGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeGroup);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetFeedback()) {
      if (!first) sb.append(", ");
      sb.append("feedback:");
      sb.append(this.feedback);
      first = false;
    }
    if (isSetCron()) {
      if (!first) sb.append(", ");
      sb.append("cron:");
      if (this.cron == null) {
        sb.append("null");
      } else {
        sb.append(this.cron);
      }
      first = false;
    }
    if (isSetTriggerTime()) {
      if (!first) sb.append(", ");
      sb.append("triggerTime:");
      sb.append(this.triggerTime);
      first = false;
    }
    if (isSetRepeatCount()) {
      if (!first) sb.append(", ");
      sb.append("repeatCount:");
      sb.append(this.repeatCount);
      first = false;
    }
    if (isSetRepeatInterval()) {
      if (!first) sb.append(", ");
      sb.append("repeatInterval:");
      sb.append(this.repeatInterval);
      first = false;
    }
    if (isSetRelyOnPrevCycle()) {
      if (!first) sb.append(", ");
      sb.append("relyOnPrevCycle:");
      sb.append(this.relyOnPrevCycle);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("submitHost:");
    if (this.submitHost == null) {
      sb.append("null");
    } else {
      sb.append(this.submitHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitPid:");
    sb.append(this.submitPid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (taskId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    if (nodeGroup == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeGroup' was not present! Struct: " + toString());
    }
    if (action == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'action' was not present! Struct: " + toString());
    }
    if (submitHost == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'submitHost' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'submitPid' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobStructStandardScheme getScheme() {
      return new JobStructStandardScheme();
    }
  }

  private static class JobStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<JobStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskId = iprot.readString();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_RETRY_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxRetryTimes = iprot.readI32();
              struct.setMaxRetryTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RETRY_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retryTimes = iprot.readI32();
              struct.setRetryTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NODE_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeGroup = iprot.readString();
              struct.setNodeGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.action = iprot.readString();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.params = iprot.readString();
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FEEDBACK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.feedback = iprot.readBool();
              struct.setFeedbackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CRON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cron = iprot.readString();
              struct.setCronIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRIGGER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.triggerTime = iprot.readI64();
              struct.setTriggerTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REPEAT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repeatCount = iprot.readI32();
              struct.setRepeatCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REPEAT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repeatInterval = iprot.readI32();
              struct.setRepeatIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RELY_ON_PREV_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.relyOnPrevCycle = iprot.readBool();
              struct.setRelyOnPrevCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SUBMIT_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.submitHost = iprot.readString();
              struct.setSubmitHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SUBMIT_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.submitPid = iprot.readI32();
              struct.setSubmitPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSubmitPid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'submitPid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskId != null) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeString(struct.taskId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxRetryTimes()) {
        oprot.writeFieldBegin(MAX_RETRY_TIMES_FIELD_DESC);
        oprot.writeI32(struct.maxRetryTimes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRetryTimes()) {
        oprot.writeFieldBegin(RETRY_TIMES_FIELD_DESC);
        oprot.writeI32(struct.retryTimes);
        oprot.writeFieldEnd();
      }
      if (struct.nodeGroup != null) {
        oprot.writeFieldBegin(NODE_GROUP_FIELD_DESC);
        oprot.writeString(struct.nodeGroup);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeString(struct.action);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          oprot.writeString(struct.params);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFeedback()) {
        oprot.writeFieldBegin(FEEDBACK_FIELD_DESC);
        oprot.writeBool(struct.feedback);
        oprot.writeFieldEnd();
      }
      if (struct.cron != null) {
        if (struct.isSetCron()) {
          oprot.writeFieldBegin(CRON_FIELD_DESC);
          oprot.writeString(struct.cron);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTriggerTime()) {
        oprot.writeFieldBegin(TRIGGER_TIME_FIELD_DESC);
        oprot.writeI64(struct.triggerTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRepeatCount()) {
        oprot.writeFieldBegin(REPEAT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.repeatCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRepeatInterval()) {
        oprot.writeFieldBegin(REPEAT_INTERVAL_FIELD_DESC);
        oprot.writeI32(struct.repeatInterval);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRelyOnPrevCycle()) {
        oprot.writeFieldBegin(RELY_ON_PREV_CYCLE_FIELD_DESC);
        oprot.writeBool(struct.relyOnPrevCycle);
        oprot.writeFieldEnd();
      }
      if (struct.submitHost != null) {
        oprot.writeFieldBegin(SUBMIT_HOST_FIELD_DESC);
        oprot.writeString(struct.submitHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUBMIT_PID_FIELD_DESC);
      oprot.writeI32(struct.submitPid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobStructTupleScheme getScheme() {
      return new JobStructTupleScheme();
    }
  }

  private static class JobStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<JobStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.taskId);
      oprot.writeString(struct.type);
      oprot.writeString(struct.nodeGroup);
      oprot.writeString(struct.action);
      oprot.writeString(struct.submitHost);
      oprot.writeI32(struct.submitPid);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMaxRetryTimes()) {
        optionals.set(0);
      }
      if (struct.isSetRetryTimes()) {
        optionals.set(1);
      }
      if (struct.isSetParams()) {
        optionals.set(2);
      }
      if (struct.isSetFeedback()) {
        optionals.set(3);
      }
      if (struct.isSetCron()) {
        optionals.set(4);
      }
      if (struct.isSetTriggerTime()) {
        optionals.set(5);
      }
      if (struct.isSetRepeatCount()) {
        optionals.set(6);
      }
      if (struct.isSetRepeatInterval()) {
        optionals.set(7);
      }
      if (struct.isSetRelyOnPrevCycle()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetMaxRetryTimes()) {
        oprot.writeI32(struct.maxRetryTimes);
      }
      if (struct.isSetRetryTimes()) {
        oprot.writeI32(struct.retryTimes);
      }
      if (struct.isSetParams()) {
        oprot.writeString(struct.params);
      }
      if (struct.isSetFeedback()) {
        oprot.writeBool(struct.feedback);
      }
      if (struct.isSetCron()) {
        oprot.writeString(struct.cron);
      }
      if (struct.isSetTriggerTime()) {
        oprot.writeI64(struct.triggerTime);
      }
      if (struct.isSetRepeatCount()) {
        oprot.writeI32(struct.repeatCount);
      }
      if (struct.isSetRepeatInterval()) {
        oprot.writeI32(struct.repeatInterval);
      }
      if (struct.isSetRelyOnPrevCycle()) {
        oprot.writeBool(struct.relyOnPrevCycle);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.taskId = iprot.readString();
      struct.setTaskIdIsSet(true);
      struct.type = iprot.readString();
      struct.setTypeIsSet(true);
      struct.nodeGroup = iprot.readString();
      struct.setNodeGroupIsSet(true);
      struct.action = iprot.readString();
      struct.setActionIsSet(true);
      struct.submitHost = iprot.readString();
      struct.setSubmitHostIsSet(true);
      struct.submitPid = iprot.readI32();
      struct.setSubmitPidIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.maxRetryTimes = iprot.readI32();
        struct.setMaxRetryTimesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.retryTimes = iprot.readI32();
        struct.setRetryTimesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.params = iprot.readString();
        struct.setParamsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.feedback = iprot.readBool();
        struct.setFeedbackIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cron = iprot.readString();
        struct.setCronIsSet(true);
      }
      if (incoming.get(5)) {
        struct.triggerTime = iprot.readI64();
        struct.setTriggerTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.repeatCount = iprot.readI32();
        struct.setRepeatCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.repeatInterval = iprot.readI32();
        struct.setRepeatIntervalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.relyOnPrevCycle = iprot.readBool();
        struct.setRelyOnPrevCycleIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

